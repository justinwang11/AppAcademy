class CLI

  def start
    get_user_id
    choice = get_user_choice
    if choice == 1
      create_new_url
    else
      visit_shortened_url
    end
    puts "Congratulations! You did a thing. Yay."
  end

  def get_user_id
    puts "What is your email?"
    email = gets.chomp
    user = User.find_by_email(email)
    if user.nil?
      puts "Email not in your system. Do you want to create a new account? (y/n)"
      input = gets.chomp until ["y", "n"].include?(input)
      if input == "y"
        User.create!(email: email)
        @id = User.last.id
      else
        get_user_id
      end
    else
      @id = user.id
    end
  end

  def get_user_choice
    puts "What do you want to do?"
    puts "1. Create shortened URL"
    puts "2. Visit shortened URL"
    input = gets.to_i
    #retry unless [1, 2].include?(input)
    input
  end

  def create_new_url
    tag_name = get_tag_name

    puts "Type in your long url (e.g. http://www.google.com):"
    long_url = gets.chomp
    ShortenedUrl.create_for_user_and_long_url(User.find_by_id(@id), long_url)
    shortened_url = ShortenedUrl.last.short_url
    puts "Your shortened URL is #{shortened_url}"

    create_tag(tag_name, ShortenedUrl.last.id)
  rescue ActiveRecord::RecordInvalid => e
    puts e.message
    retry
  end

  def get_tag_name
    print "Current Tags: "
    TagTopic.all.each do |tag|
      print "#{tag.id}: #{tag.name} "
    end
    puts "\nEnter an existing tag or create a new one."
    gets.chomp
  end

  def create_tag(tag_name, url_id)
    tag_topic = TagTopic.find_by_name(tag_name)
    if tag_topic
      tag_id = tag_topic.id
    else
      TagTopic.create!(name: tag_name)
      tag_id = TagTopic.last.id
    end
    Tagging.create!(tag_topic_id: tag_id, shortened_url_id: url_id)
  end

  def visit_shortened_url
    puts "Type in the shortened URL."
    short_url = gets.chomp
    shortened_url = ShortenedUrl.find_by_short_url(short_url)
    if shortened_url
      Visit.record_visit!(User.find_by_id(@id), shortened_url)
      Launchy.open( shortened_url.long_url )
    else
      puts "Shortened url not in our system."
    end
  end

end
CLI.new.start
